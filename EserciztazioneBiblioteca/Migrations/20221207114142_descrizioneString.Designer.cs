// <auto-generated />
using System;
using EserciztazioneBiblioteca.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EserciztazioneBiblioteca.Migrations
{
    [DbContext(typeof(EserciztazioneBibliotecaContext))]
    [Migration("20221207114142_descrizioneString")]
    partial class descrizioneString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Autore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Anno_di_nascita")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Luogo_di_nascita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Autore");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Casa_editrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("nome_editore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Casa_editrice");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codice_fisc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data_di_nascita")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero_cellulare")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Genere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genere");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Anno_di_pubblicazione")
                        .HasColumnType("datetime2");

                    b.Property<int>("AutoreId")
                        .HasColumnType("int");

                    b.Property<int>("Casa_editriceId")
                        .HasColumnType("int");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenereId")
                        .HasColumnType("int");

                    b.Property<string>("Lingua")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrestitoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Titolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutoreId");

                    b.HasIndex("Casa_editriceId");

                    b.HasIndex("GenereId");

                    b.HasIndex("PrestitoId");

                    b.ToTable("Libro");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Prestito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data_fine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Data_inizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Prestito");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Libro", b =>
                {
                    b.HasOne("EserciztazioneBiblioteca.Models.Autore", "Autore")
                        .WithMany("Libri")
                        .HasForeignKey("AutoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EserciztazioneBiblioteca.Models.Casa_editrice", "casa_Editrice")
                        .WithMany("Libri")
                        .HasForeignKey("Casa_editriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EserciztazioneBiblioteca.Models.Genere", "Genere")
                        .WithMany("Libri")
                        .HasForeignKey("GenereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EserciztazioneBiblioteca.Models.Prestito", "Prestiti")
                        .WithMany()
                        .HasForeignKey("PrestitoId");

                    b.Navigation("Autore");

                    b.Navigation("Genere");

                    b.Navigation("Prestiti");

                    b.Navigation("casa_Editrice");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Prestito", b =>
                {
                    b.HasOne("EserciztazioneBiblioteca.Models.Cliente", "Clienti")
                        .WithMany("Prestiti")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clienti");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Autore", b =>
                {
                    b.Navigation("Libri");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Casa_editrice", b =>
                {
                    b.Navigation("Libri");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Cliente", b =>
                {
                    b.Navigation("Prestiti");
                });

            modelBuilder.Entity("EserciztazioneBiblioteca.Models.Genere", b =>
                {
                    b.Navigation("Libri");
                });
#pragma warning restore 612, 618
        }
    }
}
